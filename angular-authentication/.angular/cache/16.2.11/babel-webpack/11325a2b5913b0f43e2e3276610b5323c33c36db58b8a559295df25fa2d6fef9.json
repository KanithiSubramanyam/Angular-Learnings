{"ast":null,"code":"import { HttpClient } from \"@angular/common/http\";\nimport { inject } from \"@angular/core\";\nimport { catchError, throwError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nexport class AuthService {\n  constructor() {\n    this.http = inject(HttpClient);\n    this.error = '';\n  }\n  signUp(email, password) {\n    const data = {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    };\n    return this.http.post('https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyBwVQlYXpYf2AAZ50bsunrXT_LVFONfdMs', data).pipe(this.handleError(this.error));\n  }\n  login(email, password) {\n    const data = {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    };\n    this.http.post('https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyBwVQlYXpYf2AAZ50bsunrXT_LVFONfdMs', data);\n  }\n  handleError(error) {\n    catchError(error => {\n      let errorMessage = 'An unknown error occurred';\n      if (!error.error || !error.error.error) {\n        return throwError(() => errorMessage);\n      }\n      switch (error.error.error.message) {\n        case 'EMAIL_EXISTS':\n          errorMessage = 'Email already exists';\n          break;\n        case 'EMAIL_NOT_FOUND':\n          errorMessage = 'Email not found';\n          break;\n        case 'INVALID_PASSWORD':\n          errorMessage = 'Invalid password';\n          break;\n        default:\n          errorMessage = 'An unknown error occurred';\n          break;\n      }\n      return throwError(() => errorMessage);\n    });\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpClient","inject","catchError","throwError","AuthService","constructor","http","error","signUp","email","password","data","returnSecureToken","post","pipe","handleError","login","errorMessage","message","_","_2","factory","ɵfac","providedIn"],"sources":["E:\\sails\\Angular\\angular-authentication\\src\\app\\Services\\auth.service.ts"],"sourcesContent":["import { HttpClient } from \"@angular/common/http\";\r\nimport { inject, Injectable } from \"@angular/core\";\r\nimport { AuthResponse } from \"../Model/AuthReponse\";\r\nimport { catchError, throwError } from \"rxjs\";\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class AuthService   {\r\n\r\n    http : HttpClient = inject(HttpClient);\r\n    error : string = '';\r\n    signUp(email, password ){\r\n        const data = {\r\n            email : email,\r\n            password : password,\r\n            returnSecureToken: true\r\n        }\r\n\r\n       return this.http.post<AuthResponse>('https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyBwVQlYXpYf2AAZ50bsunrXT_LVFONfdMs', data)\r\n       .pipe(\r\n           this.handleError(this.error)\r\n        );\r\n    }\r\n    login(email, password){\r\n        const data = {\r\n            email : email,\r\n            password : password,\r\n            returnSecureToken: true\r\n        }\r\n    this.http.post<AuthResponse>('https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyBwVQlYXpYf2AAZ50bsunrXT_LVFONfdMs', data)\r\n    }\r\n\r\n    private handleError(error){\r\n        catchError(error => {\r\n            let errorMessage = 'An unknown error occurred';\r\n            if(!error.error || !error.error.error){\r\n                return throwError( ()=>errorMessage)\r\n            }\r\n            switch(error.error.error.message){\r\n                case 'EMAIL_EXISTS':\r\n                    errorMessage = 'Email already exists';\r\n                    break;\r\n                case 'EMAIL_NOT_FOUND':\r\n                    errorMessage = 'Email not found';\r\n                    break;\r\n                case 'INVALID_PASSWORD':\r\n                    errorMessage = 'Invalid password';\r\n                    break;\r\n                default:\r\n                    errorMessage = 'An unknown error occurred';\r\n                    break;\r\n            }\r\n            return throwError( ()=>errorMessage)\r\n        })\r\n    }\r\n}"],"mappings":"AAAA,SAASA,UAAU,QAAQ,sBAAsB;AACjD,SAASC,MAAM,QAAoB,eAAe;AAElD,SAASC,UAAU,EAAEC,UAAU,QAAQ,MAAM;;AAK7C,OAAM,MAAOC,WAAW;EAHxBC,YAAA;IAKI,KAAAC,IAAI,GAAgBL,MAAM,CAACD,UAAU,CAAC;IACtC,KAAAO,KAAK,GAAY,EAAE;;EACnBC,MAAMA,CAACC,KAAK,EAAEC,QAAQ;IAClB,MAAMC,IAAI,GAAG;MACTF,KAAK,EAAGA,KAAK;MACbC,QAAQ,EAAGA,QAAQ;MACnBE,iBAAiB,EAAE;KACtB;IAEF,OAAO,IAAI,CAACN,IAAI,CAACO,IAAI,CAAe,uGAAuG,EAAEF,IAAI,CAAC,CACjJG,IAAI,CACD,IAAI,CAACC,WAAW,CAAC,IAAI,CAACR,KAAK,CAAC,CAC9B;EACL;EACAS,KAAKA,CAACP,KAAK,EAAEC,QAAQ;IACjB,MAAMC,IAAI,GAAG;MACTF,KAAK,EAAGA,KAAK;MACbC,QAAQ,EAAGA,QAAQ;MACnBE,iBAAiB,EAAE;KACtB;IACL,IAAI,CAACN,IAAI,CAACO,IAAI,CAAe,mHAAmH,EAAEF,IAAI,CAAC;EACvJ;EAEQI,WAAWA,CAACR,KAAK;IACrBL,UAAU,CAACK,KAAK,IAAG;MACf,IAAIU,YAAY,GAAG,2BAA2B;MAC9C,IAAG,CAACV,KAAK,CAACA,KAAK,IAAI,CAACA,KAAK,CAACA,KAAK,CAACA,KAAK,EAAC;QAClC,OAAOJ,UAAU,CAAE,MAAIc,YAAY,CAAC;;MAExC,QAAOV,KAAK,CAACA,KAAK,CAACA,KAAK,CAACW,OAAO;QAC5B,KAAK,cAAc;UACfD,YAAY,GAAG,sBAAsB;UACrC;QACJ,KAAK,iBAAiB;UAClBA,YAAY,GAAG,iBAAiB;UAChC;QACJ,KAAK,kBAAkB;UACnBA,YAAY,GAAG,kBAAkB;UACjC;QACJ;UACIA,YAAY,GAAG,2BAA2B;UAC1C;;MAER,OAAOd,UAAU,CAAE,MAAIc,YAAY,CAAC;IACxC,CAAC,CAAC;EACN;EAAC,QAAAE,CAAA,G;qBA/CQf,WAAW;EAAA;EAAA,QAAAgB,EAAA,G;WAAXhB,WAAW;IAAAiB,OAAA,EAAXjB,WAAW,CAAAkB,IAAA;IAAAC,UAAA,EAFR;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}