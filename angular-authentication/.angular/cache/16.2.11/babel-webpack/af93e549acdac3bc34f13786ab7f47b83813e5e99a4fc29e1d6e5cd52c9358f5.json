{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, inject } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { TaskService } from '../Services/task.service';\nexport let DashboardComponent = class DashboardComponent {\n  constructor() {\n    this.showCreateTaskForm = false;\n    this.showTaskDetails = false;\n    this.http = inject(HttpClient);\n    this.allTasks = [];\n    this.taskService = inject(TaskService);\n    this.currentTaskId = '';\n    this.isLoading = false;\n    this.currentTask = null;\n    this.errorMessage = null;\n    this.editMode = false;\n  }\n  ngOnInit() {\n    this.fetchAllTasks();\n    this.errorSub = this.taskService.errorSubject.subscribe({\n      next: httpError => {\n        this.setErrorMessage(httpError);\n      }\n    });\n  }\n  ngOnDestroy() {\n    this.errorSub.unsubscribe();\n  }\n  OpenCreateTaskForm() {\n    this.showCreateTaskForm = true;\n    this.editMode = false;\n    this.selectedTask = {\n      title: '',\n      desc: '',\n      assignedTo: '',\n      createdAt: '',\n      priority: '',\n      status: ''\n    };\n  }\n  showCurrentTaskDetails(id) {\n    this.showTaskDetails = true;\n    this.taskService.getTaskDetails(id).subscribe({\n      next: data => {\n        this.currentTask = data;\n      }\n    });\n  }\n  CloseTaskDetails() {\n    this.showTaskDetails = false;\n  }\n  CloseCreateTaskForm() {\n    this.showCreateTaskForm = false;\n  }\n  CreateOrUpdateTask(data) {\n    if (!this.editMode) this.taskService.CreateTask(data);else this.taskService.UpdateTask(this.currentTaskId, data);\n  }\n  /*{\n    key1: {},\n    key2: {}\n  }*/\n  FetchAllTaskClicked() {\n    this.fetchAllTasks();\n  }\n  fetchAllTasks() {\n    this.isLoading = true;\n    this.taskService.GetAlltasks().subscribe({\n      next: tasks => {\n        this.allTasks = tasks;\n        this.isLoading = false;\n      },\n      error: error => {\n        this.setErrorMessage(error);\n        this.isLoading = false;\n      }\n    });\n  }\n  setErrorMessage(err) {\n    if (err.error.error === 'Permission denied') {\n      this.errorMessage = 'You do not have permisssion to perform this action';\n    } else {\n      this.errorMessage = err.message;\n    }\n    setTimeout(() => {\n      this.errorMessage = null;\n    }, 3000);\n  }\n  DeleteTask(id) {\n    this.taskService.DeleteTask(id);\n  }\n  DeleteAllTask() {\n    this.taskService.DeleteAllTasks();\n  }\n  OnEditTaskClicked(id) {\n    this.currentTaskId = id;\n    //OPEN EDIT TASK FORM\n    this.showCreateTaskForm = true;\n    this.editMode = true;\n    this.selectedTask = this.allTasks.find(task => {\n      return task.id === id;\n    });\n  }\n};\nDashboardComponent = __decorate([Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css']\n})], DashboardComponent);","map":{"version":3,"names":["Component","inject","HttpClient","TaskService","DashboardComponent","constructor","showCreateTaskForm","showTaskDetails","http","allTasks","taskService","currentTaskId","isLoading","currentTask","errorMessage","editMode","ngOnInit","fetchAllTasks","errorSub","errorSubject","subscribe","next","httpError","setErrorMessage","ngOnDestroy","unsubscribe","OpenCreateTaskForm","selectedTask","title","desc","assignedTo","createdAt","priority","status","showCurrentTaskDetails","id","getTaskDetails","data","CloseTaskDetails","CloseCreateTaskForm","CreateOrUpdateTask","CreateTask","UpdateTask","FetchAllTaskClicked","GetAlltasks","tasks","error","err","message","setTimeout","DeleteTask","DeleteAllTask","DeleteAllTasks","OnEditTaskClicked","find","task","__decorate","selector","templateUrl","styleUrls"],"sources":["E:\\sails\\Angular\\angular-authentication\\src\\app\\dashboard\\dashboard.component.ts"],"sourcesContent":["import { Component, OnInit, inject } from '@angular/core';\r\nimport { Task } from '../Model/Task';\r\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\r\nimport { TaskService } from '../Services/task.service';\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-dashboard',\r\n  templateUrl: './dashboard.component.html',\r\n  styleUrls: ['./dashboard.component.css']\r\n})\r\nexport class DashboardComponent implements OnInit{\r\n  showCreateTaskForm: boolean = false;\r\n  showTaskDetails: boolean = false;\r\n  http: HttpClient = inject(HttpClient)\r\n  allTasks: Task[] = [];\r\n  taskService: TaskService = inject(TaskService);\r\n  currentTaskId: string = '';\r\n  isLoading: boolean = false;\r\n\r\n  currentTask: Task | null = null;\r\n\r\n  errorMessage: string | null = null;\r\n\r\n  editMode: boolean = false;\r\n  selectedTask: Task;\r\n\r\n  errorSub: Subscription\r\n\r\n  ngOnInit(){\r\n    this.fetchAllTasks();\r\n    this.errorSub = this.taskService.errorSubject.subscribe({next: (httpError) => {\r\n      this.setErrorMessage(httpError);\r\n    }})\r\n  }\r\n\r\n  ngOnDestroy(){\r\n    this.errorSub.unsubscribe();\r\n  }\r\n\r\n  OpenCreateTaskForm(){\r\n    this.showCreateTaskForm = true;\r\n    this.editMode = false;\r\n    this.selectedTask = {title: '', desc: '', assignedTo: '', createdAt: '', priority: '', status: ''}\r\n  }\r\n\r\n  showCurrentTaskDetails(id: string | undefined){\r\n    this.showTaskDetails = true;\r\n    this.taskService.getTaskDetails(id).subscribe({next: (data: Task) => {\r\n      this.currentTask = data;\r\n    }});\r\n  }\r\n\r\n  CloseTaskDetails(){\r\n    this.showTaskDetails = false;\r\n  }\r\n\r\n  CloseCreateTaskForm(){\r\n    this.showCreateTaskForm = false;\r\n  }\r\n\r\n  CreateOrUpdateTask(data: Task){\r\n    if(!this.editMode)\r\n      this.taskService.CreateTask(data);\r\n    else\r\n      this.taskService.UpdateTask(this.currentTaskId, data);\r\n  }\r\n\r\n  /*{\r\n    key1: {},\r\n    key2: {}\r\n  }*/\r\n\r\n  FetchAllTaskClicked(){\r\n    this.fetchAllTasks()\r\n  }\r\n\r\n  private fetchAllTasks(){\r\n    this.isLoading = true;\r\n    this.taskService.GetAlltasks().subscribe({next: (tasks) => {\r\n      this.allTasks = tasks;\r\n      this.isLoading = false;\r\n    }, error: (error) => {\r\n      this.setErrorMessage(error);\r\n      this.isLoading = false;\r\n    }})\r\n  }\r\n\r\n  private setErrorMessage(err: HttpErrorResponse){\r\n    if(err.error.error === 'Permission denied'){\r\n      this.errorMessage = 'You do not have permisssion to perform this action';\r\n    }\r\n    else{\r\n      this.errorMessage = err.message;\r\n    }\r\n\r\n    setTimeout(() => {\r\n      this.errorMessage = null;\r\n    }, 3000);\r\n  }\r\n\r\n  DeleteTask(id: string | undefined){\r\n    this.taskService.DeleteTask(id);\r\n  }\r\n\r\n  DeleteAllTask(){\r\n    this.taskService.DeleteAllTasks();\r\n  }\r\n\r\n  OnEditTaskClicked(id: string | undefined){\r\n    this.currentTaskId = id;\r\n    \r\n    //OPEN EDIT TASK FORM\r\n    this.showCreateTaskForm = true;\r\n    this.editMode = true;\r\n\r\n    this.selectedTask = this.allTasks.find((task) => {return task.id === id})\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}