{"ast":null,"code":"import { HttpEventType } from \"@angular/common/http\";\nimport { tap } from \"rxjs\";\nexport class AuthInterceptorService {\n  intercept(req, next) {\n    const modifiedReq = req.clone({\n      headers: req.headers.append('auth', 'xyz')\n    });\n    // console.log('AuthInterceptorService - intercept()');\n    return next.handle(modifiedReq).pipe(tap(event => {\n      // console.log(event);\n      if (event.type === HttpEventType.Response) {\n        console.log('response received');\n      }\n    }));\n  }\n}","map":{"version":3,"names":["HttpEventType","tap","AuthInterceptorService","intercept","req","next","modifiedReq","clone","headers","append","handle","pipe","event","type","Response","console","log"],"sources":["E:\\sails\\Angular\\angular-http-client\\src\\app\\services\\auth-interceptors.service.ts"],"sourcesContent":["import { HttpEvent, HttpEventType, HttpHandler, HttpInterceptor, HttpRequest } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { Observable, tap } from \"rxjs\";\r\n\r\n\r\nexport class AuthInterceptorService implements HttpInterceptor{\r\n    intercept(req: HttpRequest<any>, next: HttpHandler) {\r\n        \r\n        const modifiedReq = req.clone({headers: req.headers.append('auth', 'xyz')});\r\n        // console.log('AuthInterceptorService - intercept()');\r\n        return next.handle(modifiedReq).pipe(tap((event)=>{\r\n            // console.log(event);\r\n            if(event.type === HttpEventType.Response){\r\n                console.log('response received');\r\n            }\r\n        }));\r\n    }\r\n}"],"mappings":"AAAA,SAAoBA,aAAa,QAAmD,sBAAsB;AAE1G,SAAqBC,GAAG,QAAQ,MAAM;AAGtC,OAAM,MAAOC,sBAAsB;EAC/BC,SAASA,CAACC,GAAqB,EAAEC,IAAiB;IAE9C,MAAMC,WAAW,GAAGF,GAAG,CAACG,KAAK,CAAC;MAACC,OAAO,EAAEJ,GAAG,CAACI,OAAO,CAACC,MAAM,CAAC,MAAM,EAAE,KAAK;IAAC,CAAC,CAAC;IAC3E;IACA,OAAOJ,IAAI,CAACK,MAAM,CAACJ,WAAW,CAAC,CAACK,IAAI,CAACV,GAAG,CAAEW,KAAK,IAAG;MAC9C;MACA,IAAGA,KAAK,CAACC,IAAI,KAAKb,aAAa,CAACc,QAAQ,EAAC;QACrCC,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;;IAExC,CAAC,CAAC,CAAC;EACP"},"metadata":{},"sourceType":"module","externalDependencies":[]}