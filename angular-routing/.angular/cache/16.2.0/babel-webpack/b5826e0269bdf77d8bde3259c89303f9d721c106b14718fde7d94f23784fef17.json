{"ast":null,"code":"var _class;\nimport { inject } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { AuthenticationService } from \"./auth.service\";\nimport * as i0 from \"@angular/core\";\nexport class AuthGaurdService {\n  constructor() {\n    this.authService = inject(AuthenticationService);\n    this.router = inject(Router);\n  }\n  canActivate(route, state) {\n    if (this.authService.isAuthenticated()) {\n      return true;\n    } else {\n      this.router.navigate(['/login']);\n      return false;\n    }\n  }\n  canActivateChild(childRoute, state) {\n    return this.canActivate(childRoute, state);\n  }\n  canDeactivate(component, currentRoute, currentState, nextState) {\n    alert('can not navigate without saving');\n    return false;\n  }\n}\n_class = AuthGaurdService;\n_class.ɵfac = function AuthGaurdService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["inject","Router","AuthenticationService","AuthGaurdService","constructor","authService","router","canActivate","route","state","isAuthenticated","navigate","canActivateChild","childRoute","canDeactivate","component","currentRoute","currentState","nextState","alert","factory","ɵfac","providedIn"],"sources":["E:\\sails\\Angular\\start\\src\\app\\Services\\AuthGaurd.service.ts"],"sourcesContent":["import { inject, Injectable } from \"@angular/core\";\r\nimport { CanActivate, Router, RouterStateSnapshot, ActivatedRouteSnapshot, CanActivateChild, UrlTree, CanDeactivate } from \"@angular/router\";\r\nimport { Observable } from \"rxjs\";\r\nimport { AuthenticationService } from \"./auth.service\";\r\nimport { ContactComponent } from \"../contact/contact.component\";\r\n\r\n@Injectable({\r\n    providedIn : 'root',\r\n})\r\nexport class AuthGaurdService implements CanActivate, CanActivateChild, CanDeactivate<ContactComponent>{\r\n\r\n    authService : AuthenticationService = inject(AuthenticationService);\r\n    router : Router = inject(Router)\r\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot):\r\n    boolean | Observable<boolean> | Promise<boolean> {\r\n\r\n        if(this.authService.isAuthenticated()){\r\n            return true;\r\n        } \r\n        else{\r\n            this.router.navigate(['/login']) ;\r\n            return false;\r\n        }\r\n    }\r\n    canActivateChild(childRoute: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\r\n        return this.canActivate(childRoute, state); \r\n    }\r\n\r\n\r\n    canDeactivate(component: ContactComponent, currentRoute: ActivatedRouteSnapshot, currentState: RouterStateSnapshot, nextState: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\r\n        alert('can not navigate without saving')\r\n        return false;\r\n    }\r\n    \r\n}"],"mappings":";AAAA,SAASA,MAAM,QAAoB,eAAe;AAClD,SAAsBC,MAAM,QAA+F,iBAAiB;AAE5I,SAASC,qBAAqB,QAAQ,gBAAgB;;AAMtD,OAAM,MAAOC,gBAAgB;EAH7BC,YAAA;IAKI,KAAAC,WAAW,GAA2BL,MAAM,CAACE,qBAAqB,CAAC;IACnE,KAAAI,MAAM,GAAYN,MAAM,CAACC,MAAM,CAAC;;EAChCM,WAAWA,CAACC,KAA6B,EAAEC,KAA0B;IAGjE,IAAG,IAAI,CAACJ,WAAW,CAACK,eAAe,EAAE,EAAC;MAClC,OAAO,IAAI;KACd,MACG;MACA,IAAI,CAACJ,MAAM,CAACK,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;MAChC,OAAO,KAAK;;EAEpB;EACAC,gBAAgBA,CAACC,UAAkC,EAAEJ,KAA0B;IAC3E,OAAO,IAAI,CAACF,WAAW,CAACM,UAAU,EAAEJ,KAAK,CAAC;EAC9C;EAGAK,aAAaA,CAACC,SAA2B,EAAEC,YAAoC,EAAEC,YAAiC,EAAEC,SAA8B;IAC9IC,KAAK,CAAC,iCAAiC,CAAC;IACxC,OAAO,KAAK;EAChB;;SAvBShB,gBAAgB;;mBAAhBA,MAAgB;AAAA;;SAAhBA,MAAgB;EAAAiB,OAAA,EAAhBjB,MAAgB,CAAAkB,IAAA;EAAAC,UAAA,EAFZ;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}