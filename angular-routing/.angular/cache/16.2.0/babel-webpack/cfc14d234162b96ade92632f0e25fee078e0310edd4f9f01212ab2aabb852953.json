{"ast":null,"code":"var _class;\nimport { inject } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { AuthenticationService } from \"./auth.service\";\nimport { CourseService } from \"./course.service\";\nimport * as i0 from \"@angular/core\";\nexport class AuthGaurdService {\n  constructor() {\n    this.authService = inject(AuthenticationService);\n    this.router = inject(Router);\n    this.courseService = inject(CourseService);\n  }\n  canActivate(route, state) {\n    if (this.authService.isAuthenticated()) {\n      return true;\n    } else {\n      this.router.navigate(['/login']);\n      return false;\n    }\n  }\n  canActivateChild(childRoute, state) {\n    return this.canActivate(childRoute, state);\n  }\n  canDeactivate(component, currentRoute, currentState, nextState) {\n    // alert('can not navigate without saving');\n    // return false;\n    return component.canExit();\n  }\n  resolve(route, state) {\n    // let courseList: Course[] = [];\n    // this.courseService.getAllcourses().subscribe( (courses)=>{\n    //     courseList = courses;\n    // });\n    // return courseList;\n    return this.courseService;\n  }\n}\n_class = AuthGaurdService;\n_class.ɵfac = function AuthGaurdService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["inject","Router","AuthenticationService","CourseService","AuthGaurdService","constructor","authService","router","courseService","canActivate","route","state","isAuthenticated","navigate","canActivateChild","childRoute","canDeactivate","component","currentRoute","currentState","nextState","canExit","resolve","factory","ɵfac","providedIn"],"sources":["E:\\sails\\Angular\\start\\src\\app\\Services\\AuthGaurd.service.ts"],"sourcesContent":["import { inject, Injectable } from \"@angular/core\";\r\nimport { CanActivate, Router, RouterStateSnapshot, ActivatedRouteSnapshot, CanActivateChild, UrlTree, CanDeactivate, Resolve } from \"@angular/router\";\r\nimport { Observable } from \"rxjs\";\r\nimport { AuthenticationService } from \"./auth.service\";\r\nimport { ContactComponent } from \"../contact/contact.component\";\r\nimport { Course } from \"../Models/course\";\r\nimport { CourseService } from \"./course.service\";\r\n\r\n\r\nexport interface IDeactivateComponent {\r\n    canExit: () => boolean | Observable<boolean> | Promise<boolean>\r\n}\r\n\r\n\r\n\r\n@Injectable({\r\n    providedIn : 'root',\r\n})\r\nexport class AuthGaurdService implements CanActivate, CanActivateChild, CanDeactivate<IDeactivateComponent>, Resolve<Course[]>{\r\n\r\n    authService : AuthenticationService = inject(AuthenticationService);\r\n    router : Router = inject(Router)\r\n    courseService  : CourseService = inject(CourseService);\r\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot):\r\n\r\n    \r\n    boolean | Observable<boolean> | Promise<boolean> {\r\n\r\n        if(this.authService.isAuthenticated()){\r\n            return true;\r\n        } \r\n        else{\r\n            this.router.navigate(['/login']) ;\r\n            return false;\r\n        }\r\n    }\r\n    canActivateChild(childRoute: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\r\n        return this.canActivate(childRoute, state); \r\n    }\r\n\r\n\r\n    canDeactivate(component: IDeactivateComponent, currentRoute: ActivatedRouteSnapshot, currentState: RouterStateSnapshot, nextState: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\r\n        // alert('can not navigate without saving');\r\n        // return false;\r\n\r\n        return component.canExit();\r\n    }\r\n\r\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<Course[]> | Promise<Course[]> | Course[] {\r\n        // let courseList: Course[] = [];\r\n        // this.courseService.getAllcourses().subscribe( (courses)=>{\r\n        //     courseList = courses;\r\n        // });\r\n        // return courseList;\r\n\r\n        return this.courseService\r\n    }\r\n    \r\n}"],"mappings":";AAAA,SAASA,MAAM,QAAoB,eAAe;AAClD,SAAsBC,MAAM,QAAwG,iBAAiB;AAErJ,SAASC,qBAAqB,QAAQ,gBAAgB;AAGtD,SAASC,aAAa,QAAQ,kBAAkB;;AAYhD,OAAM,MAAOC,gBAAgB;EAH7BC,YAAA;IAKI,KAAAC,WAAW,GAA2BN,MAAM,CAACE,qBAAqB,CAAC;IACnE,KAAAK,MAAM,GAAYP,MAAM,CAACC,MAAM,CAAC;IAChC,KAAAO,aAAa,GAAoBR,MAAM,CAACG,aAAa,CAAC;;EACtDM,WAAWA,CAACC,KAA6B,EAAEC,KAA0B;IAKjE,IAAG,IAAI,CAACL,WAAW,CAACM,eAAe,EAAE,EAAC;MAClC,OAAO,IAAI;KACd,MACG;MACA,IAAI,CAACL,MAAM,CAACM,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;MAChC,OAAO,KAAK;;EAEpB;EACAC,gBAAgBA,CAACC,UAAkC,EAAEJ,KAA0B;IAC3E,OAAO,IAAI,CAACF,WAAW,CAACM,UAAU,EAAEJ,KAAK,CAAC;EAC9C;EAGAK,aAAaA,CAACC,SAA+B,EAAEC,YAAoC,EAAEC,YAAiC,EAAEC,SAA8B;IAClJ;IACA;IAEA,OAAOH,SAAS,CAACI,OAAO,EAAE;EAC9B;EAEAC,OAAOA,CAACZ,KAA6B,EAAEC,KAA0B;IAC7D;IACA;IACA;IACA;IACA;IAEA,OAAO,IAAI,CAACH,aAAa;EAC7B;;SAtCSJ,gBAAgB;;mBAAhBA,MAAgB;AAAA;;SAAhBA,MAAgB;EAAAmB,OAAA,EAAhBnB,MAAgB,CAAAoB,IAAA;EAAAC,UAAA,EAFZ;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}